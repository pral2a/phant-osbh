{
  "author": {
    "name": "Wez Furlong",
    "email": "wez@wezfurlong.org",
    "url": "http://wezfurlong.org"
  },
  "name": "wez-telnet",
  "description": "Telnet Protocol Listener",
  "version": "0.1.1",
  "homepage": "https://github.com/wez/telnetjs",
  "keywords": [
    "telnet",
    "server"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/wez/telnetjs.git"
  },
  "main": "telnet.js",
  "engines": {
    "node": "~0.6.5"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "# Telnet.js\n\nA Telnet protocol listener for Node.js, written by Wez Furlong and\nlicensed under a 3-clause BSD license; see LICENSE.markdown for the full\ntext.\n\n## Features\n\n * Listen for multiple telnet clients\n * Supports \"TERMINAL TYPE\", \"NAWS\" (Window Size), \"NEW ENVIRON\",\n   \"COMPRESS2\" (MUD compression using zlib deflate)\n\n## Usage\n\nInstall it via NPM:\n\n    npm install wez-telnet\n\nNow use it:\n\n     var telnet = require('wez-telnet');\n     var s = new telnet.Server(function (client) {\n        // I am the connection callback\n        console.log(\"connected term=%s %dx%d\",\n          client.term, client.windowSize[0], client.windowSize[1]);\n\n        client.on('data', function (buf) {\n          console.log(\"data:\", buf.toString('ascii'));\n          client.write(\"you said \" + buf);\n        });\n        client.on('resize', function (width, height) {\n          console.log(\"resized to %dx%d\", width, height);\n        });\n        client.on('interrupt', function () {\n          console.log(\"INTR!\");\n          // disconnect on CTRL-C!\n          client.end();\n        });\n        client.on('close', function () {\n          console.log(\"END!\");\n        });\n     });\n     s.listen(1337);\n\n## Caveats\n\n * There is no \"urgent\" or \"out of band\" facility in Node, so some\n   aspects of telnet interrupt handling are not possible.\n * There is no ECHO or LINE-MODE handling at this time.\n * Some consistency checks throw errors that are not caught and may\n   cause the server to exit in the presence of bad input.\n\n## Exports\n\n### Server(connected)\n\nThe Server constructor.  Returns a derivative of the TCP Server object\nwhich you may subsequently invoke listen() upon to cause it to listen on\nthe desired address and port.\n\nTakes a single argument, the connection callback function.  The\nconnection function has the following prototype:\n\n     function connected(client) {}\n\nWhen a connection is established, the server will attempt to negotiate\nthe following telnet options:\n\n * Terminal Type\n * Window Size\n * Environment\n * Binary mode\n * Compress 2 (MUD Compression Protocol)\n\nOnce they have all been tried, the connection callback function will be\ninvoked.\n\nClient is an instance of a TelnetStream object that represents the\nserver side of the client connection.\n\nClient \"implements\" the ReadableStream and WritableStream interfaces.\n\n## TelnetStream\n\n### Property: 'env'\n\n    console.log(client.env.USER);\n\nTelnet streams provide an \"env\" property that holds the environmental\nvariables sent by the client.  The client must support the NEW-ENVIRON\ntelnet option for this to be effective, and clients that do will\ntypically only send a controlled set of variables by default (such as\nUSER and DISPLAY).\n\n### Property: 'term'\n\n    console.log(client.term);\n\nThe \"term\" property holds the terminal type sent by the client, if the\nclient supports the TERMINAL TYPE telnet option.\n\n### Property: 'windowSize'\n\n    console.log(\"%dx%d\", client.windowSize[0], client.windowSize[1]);\n\nHolds the negotiated window size sent by clients that support the NAWS\ntelnet option.  It is an array containing the width in the zeroth\nelement and the height in the first element.\n\n### Event: 'close'\n\n    function () {}\n\nThe close event is emitted in response to the close event being emitted\non the underlying stream; it indicates that the session is no longer\nestablished.\n\n### Event: 'data'\n\n    function (data) {}\n\nThe data event emits a Buffer containing data received from the client.\nThis may turn into a string if setEncoding() is used, but this has not\nbeen tested at the time of writing.\n\n### Event: 'environment'\n\n    function (environment) {}\n\nThis environment event emits a hash of environmental variables that have\nbeen set (or changed).  This will typically only trigger if the client\nsupports the NEW-ENVIRON telnet option and sends an incremental update.\n\nIn most cases, the NEW-ENVIRON option will be negotiated before the\nserver connect event fires; you can find the set of environmental\nvariables in client.env in this case.\n\n### Event: 'interrupt'\n\n    function () {}\n\nThe interrupt event triggers when the client sents the Interrupt\nProcessing telnet command.  This is associated with the CTRL-C key by\ndefault, but may not be effective, based on the line editing mode of the\nclient and the local TTY INTR character assignment.\n\n### Event: 'suspend'\n\n    function () {}\n\nThe interrupt event triggers when the client sents the Suspend\nProcessing telnet command.  This is associated with the CTRL-Z key by\ndefault, but may not be effective, based on the line editing mode of the\nclient and the local TTY SUSP character assignment.\n\n### Event: 'resize'\n\n    function (width, height) {}\n\nThe resize event emits the new dimensions of the client terminal.  This\nwill fire if the client supports the NAWS (Negotiate About Window Size)\ntelnet option.\n\nIn most cases, this will be negotiated before the server connect event\nfires; you can find the dimensions in the array client.windowSize.\n\n### end()\n### destroy()\n### destroySoon()\n### pause()\n### resume()\n### pipe(dest, opts)\n### setEncoding(enc)\n\nMap to the equivalent WritableStream methods of the same names.\nNote that neither pipe() nor setEncoding() have been tested at the time\nof writing; YMMV.\n\n### write(buffer)\n### write(data, encoding)\n\nSends data to the client, just like WritableStream#write.\nThe data will be properly encoded and formatted for the telnet stream;\nthis is handled by the write method so you just send the data you want\nthe client to receive.\n\n### telnetCommand(dodontwill, command)\n\nSends a telnet \"Interpret As Command\" (IAC) sequence to the client.\ndodontwill is one of the telnet DONT, DO, WONT, WILL command ids.\n\ncommand is either a telnet option id (8-bit integer) or an array of\n8-bit integers to be used as part of a sub-negotiation.\n\n*If you find that you need this method, chances are that we need to\nextend telnet.js; I'd love to hear about that, or better yet, see a pull\nrequest!*\n\n\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/wez/telnetjs/issues"
  },
  "_id": "wez-telnet@0.1.1",
  "_from": "wez-telnet@^0.1.1"
}
